import se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask

buildscript {
  repositories {
    maven { url = 'https://files.minecraftforge.net/maven' }
    jcenter()
    mavenCentral()
  }
  // This is only here while FG is under active development
  configurations.classpath {
    resolutionStrategy {
      cacheDynamicVersionsFor 10, 'seconds'
      cacheChangingModulesFor 0, 'seconds'
    }
  }
  dependencies {
    classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
  }
}

plugins {
  id 'java'
  id 'eclipse'
  id 'idea'
  id 'com.matthewprenger.cursegradle' version '1.4.0'
  id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.66'
}
apply plugin: 'net.minecraftforge.gradle'
apply from: 'buildtools/ColoredOutput.gradle'

//adds the build number to the end of the version string if on a build server
String build_number = System.getenv().BUILD_NUMBER
if (build_number == null) {
  build_number = '9999'
}

String semver = "${version_major}.${version_minor}.${version_patch}"
version = "${semver}.${build_number}"
group = 'xyz.nekogaming.mods.structure'
archivesBaseName = 'skystruct'

// Include resources generated by data generators.
sourceSets {
  main {
    resources {
      srcDir 'src/generated/resources'
    }
  }
}

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

repositories {
  mavenCentral()
  maven { url 'https://maven.latmod.com/' }
}

dependencies {
  // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
  // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
  // The userdev artifact is a special name and will get all sorts of transformations applied to it.
  //minecraft 'net.minecraftforge:forge:1.16.5-36.1.0'
  minecraft([
          group  : "${project.forgegroup}",
          name   : 'forge',
          version: "${project.mcversion}-${project.forgeversion}"
  ])

  // You may put jars on which you depend on in ./libs or you may define them like so..
  // compile "some.group:artifact:version:classifier"
  // compile "some.group:artifact:version"

  // Real examples
  // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
  // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

  // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
  // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

  // These dependencies get remapped to your current MCP mappings
  // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

  // For more info...
  // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
  // http://www.gradle.org/docs/current/userguide/dependency_management.html
  compileOnly fg.deobf('com.feed_the_beast.mods:ftb-gui-library:1.0.0.18')
}

minecraft {
  // The mappings can be changed at any time, and must be in the following format.
  // snapshot_YYYYMMDD   Snapshot are built nightly.
  // stable_#            Stables are built at the discretion of the MCP team.
  // Use non-default mappings at your own risk. they may not always work.
  // Simply re-run your setup task after changing the mappings to update your workspace.
  mappings channel: 'snapshot', version: project.mcp_mappings
  // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

  // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

  // Default run configurations.
  // These can be tweaked, removed, or duplicated as needed.
  runs {
    client {
      workingDirectory project.file('run')

      // Recommended logging data for a userdev environment
      property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

      // Recommended logging level for the console
      property 'forge.logging.console.level', 'debug'

      mods {
        skystruct {
          source sourceSets.main
        }
      }
    }

    server {
      workingDirectory project.file('run')

      // Recommended logging data for a userdev environment
      property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

      // Recommended logging level for the console
      property 'forge.logging.console.level', 'debug'

      mods {
        skystruct {
          source sourceSets.main
        }
      }
    }

    data {
      workingDirectory project.file('run')

      // Recommended logging data for a userdev environment
      property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

      // Recommended logging level for the console
      property 'forge.logging.console.level', 'debug'

      // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
      args '--mod', 'skystruct', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

      mods {
        skystruct {
          source sourceSets.main
        }
      }
    }
  }
}

task makeChangelog(type: GitChangelogTask) {
  file = file('changelog.html')
  untaggedName = "Current release ${project.version}"
  fromCommit = '2fe051cf727adce1be210a46f778aa8fe031331e'
  toRef = 'HEAD'
  templateContent = file('changelog.mustache').getText('UTF-8')
}

curseforge {
  apiKey = project.findProperty('curseforge_apikey') ?: '0'
  project {
    id = curse_project_id
    changelog = file('changelog.html')
    changelogType = 'html'
    releaseType = 'beta'
  }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
  manifest {
    attributes([
            "Specification-Title"     : "skystruct",
            "Specification-Vendor"    : "thakyZ, cat2002",
            "Specification-Version"   : "${semver}", // We are version 1 of ourselves
            "Implementation-Title"    : project.name,
            "Implementation-Version"  : project.version,
            "Implementation-Vendor"   : "thakyZ, cat2002",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
  }

  finalizedBy 'reobfJar'
}

task sourcesJar(type: Jar) {
  archiveClassifier = 'sources'
  from sourceSets.main.allJava
}

task deobfJar(type: Jar) {
  archiveClassifier = 'deobf'
  from sourceSets.main.output
}

artifacts {
  archives sourcesJar
  archives deobfJar
}

task uploadJars(dependsOn: build) {
  description = 'Uploads JARs'
  if (project.hasProperty('local_maven')) {
    apply plugin: 'maven'
    uploadArchives {
      repositories {
        mavenDeployer {
          repository(url: "file://${local_maven}")
        }
      }
    }
  }
}

idea {
  module {
    for (String exclude in ['run', 'out', 'logs']) {
      excludeDirs += file(exclude)
    }
  }
}

test {
  useJUnitPlatform()
  include 'mezz/jei/**'
  exclude 'mezz/jei/lib/**'
}
